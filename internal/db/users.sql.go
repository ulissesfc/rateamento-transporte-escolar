// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: users.sql

package db

import (
	"context"
)

const getUsers = `-- name: GetUsers :many
SELECT 
    id,
    name,
    institution,
    address,
    ST_X(location)::double precision AS longitude,
    ST_Y(location)::double precision AS latitude
From users LIMIT $1
`

type GetUsersRow struct {
	ID          int32
	Name        string
	Institution string
	Address     string
	Longitude   float64
	Latitude    float64
}

func (q *Queries) GetUsers(ctx context.Context, limit int32) ([]GetUsersRow, error) {
	rows, err := q.db.QueryContext(ctx, getUsers, limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetUsersRow
	for rows.Next() {
		var i GetUsersRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Institution,
			&i.Address,
			&i.Longitude,
			&i.Latitude,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertNode = `-- name: InsertNode :one
INSERT INTO nodes (
    name, 
    route_id,
  	sequence,
    location
) VALUES (
    $1,
    $2,
    $3,
    ST_SetSRID(ST_MakePoint($4::double precision, $5::double precision), 4326)
)
RETURNING id, name, route_id, sequence, location, updated_at
`

type InsertNodeParams struct {
	Name      string
	RouteID   int32
	Sequence  int32
	Longitude float64
	Latitude  float64
}

func (q *Queries) InsertNode(ctx context.Context, arg InsertNodeParams) (Node, error) {
	row := q.db.QueryRowContext(ctx, insertNode,
		arg.Name,
		arg.RouteID,
		arg.Sequence,
		arg.Longitude,
		arg.Latitude,
	)
	var i Node
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.RouteID,
		&i.Sequence,
		&i.Location,
		&i.UpdatedAt,
	)
	return i, err
}

const insertUser = `-- name: InsertUser :one
INSERT INTO users (
    name, 
    institution,
    address,
    approx_address,
    location
) VALUES (
    $1,
    $2,
    $3,
    $4,
    ST_SetSRID(ST_MakePoint($5::double precision, $6::double precision), 4326)
)
RETURNING id, name, institution, address, approx_address, location, updated_at
`

type InsertUserParams struct {
	Name          string
	Institution   string
	Address       string
	ApproxAddress bool
	Longitude     float64
	Latitude      float64
}

func (q *Queries) InsertUser(ctx context.Context, arg InsertUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, insertUser,
		arg.Name,
		arg.Institution,
		arg.Address,
		arg.ApproxAddress,
		arg.Longitude,
		arg.Latitude,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Institution,
		&i.Address,
		&i.ApproxAddress,
		&i.Location,
		&i.UpdatedAt,
	)
	return i, err
}
